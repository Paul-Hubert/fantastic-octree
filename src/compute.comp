#version 450
#extension GL_ARB_separate_shader_objects : enable

layout (local_size_x = 8, local_size_y = 8) in;
layout (binding = 0, rgba8) uniform writeonly image2D resultImage;

layout (binding = 1) uniform Transform {
    mat4 viewinvproj;
    vec3 pos;
} ubo;

struct Chunk {
    float ptrs[8];
    uint leaves;
};

layout(std140, binding = 2) buffer Chunks {
   Chunk chunks[];
};

const int CHUNK_SIZE = 16;
const int MAX_DEPTH = 3;


float getNode(vec3 position) {
    int depth = 0;
    Chunk curr = chunks[0];
    vec3 off = vec3(0.);
    do {
        ivec3 np = ivec3(position.x-off.x>=0.5, position.y-off.y>=0.5, position.z-off.z>=0.5);
        int ind = np.x + np.y*4 + np.z*2;
        if(((curr.leaves >> ind) & 1) == 1) {
            curr = chunks[int(curr.ptrs[ind])];
            off += np * pow(2, MAX_DEPTH - depth);
        } else {
            return curr.ptrs[ind];
        }
        depth++;
    } while(depth < MAX_DEPTH);
    return -1.;
}

void main() {
    vec2 size = vec2(imageSize(resultImage));
    if(gl_GlobalInvocationID.x >= size.x || gl_GlobalInvocationID.y >= size.y) return;

    vec3 ray = normalize((ubo.viewinvproj * vec4(gl_GlobalInvocationID.x / size.x *  -2. + 1., gl_GlobalInvocationID.y / size.y * -2. + 1., 0., 1.)).xyz);
    
    vec3 position = ubo.pos;
    
    
    
    vec3 off = vec3(0.);
    
    float length = 0., density = 0.;
    do {
        length+=1.;
        position+=ray;
        
        if(position.x<0. || position.x>CHUNK_SIZE || position.y<0. || position.y>CHUNK_SIZE || position.z<0. || position.z>CHUNK_SIZE) {
            imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), vec4(1.));
            return;
        }
        
        density = getNode(position);
        
    } while(density > 0.);
    
    //position -= ray * nextdensity/(nextdensity-density);
    
    vec3 light = normalize(vec3(0.,1.,0.2));
    
    imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), vec4(vec3(1., 0., 0.)*dot(light, normalize(vec3(cos(position.x/5.), 1., -sin(position.z/5.)))),1.));
    
}
