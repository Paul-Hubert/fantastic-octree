#version 450
#extension GL_ARB_separate_shader_objects : enable

layout (local_size_x = 8, local_size_y = 8) in;
layout (binding = 0, rgba8) uniform writeonly image2D resultImage;

layout (binding = 1) uniform Transform {
    mat4 viewinvproj;
    vec3 pos;
} ubo;

struct Chunk {
    float ptrs[8];
    uint leaves;
};

layout(std430, binding = 2) buffer Chunks {
    Chunk chunks[];
};

const int CHUNK_SIZE = 64;
const int MAX_DEPTH = 5;

void main() {
    vec2 size = vec2(imageSize(resultImage));
    if(gl_GlobalInvocationID.x >= size.x || gl_GlobalInvocationID.y >= size.y) return;

    vec3 ray = normalize((ubo.viewinvproj * vec4(gl_GlobalInvocationID.x / size.x *  -2. + 1., gl_GlobalInvocationID.y / size.y * -2. + 1., 0., 1.)).xyz);
    
    vec3 position = ubo.pos;
    
    int depth = 0, ind;
    float len = 0., density = 1.;
    do {
        len+=.1;
        position+=ray*.1;
        
        if(position.x<0. || position.x>CHUNK_SIZE || position.y<0. || position.y>CHUNK_SIZE || position.z<0. || position.z>CHUNK_SIZE) {
            if(len>=100.) {
                imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), vec4(1,1,0,1));
                return;
            }
            continue;
        }

        Chunk curr = chunks[0];
        vec3 off = vec3(0.);
        density = 1.;
        for(depth = 0; depth < MAX_DEPTH; depth++) {
            float halfsize = pow(2, MAX_DEPTH - depth);
            ivec3 np = ivec3(position.x-off.x>=halfsize, position.y-off.y>=halfsize, position.z-off.z>=halfsize);
            ind = np.x + np.y*4 + np.z*2;
            if(((curr.leaves >> ind) & 1) == 1) {
                curr = chunks[int(curr.ptrs[ind])];
                off += np * halfsize;
            } else {
                density = curr.ptrs[ind];
                break;
            }
        }
        
    } while(density > 0.);
    
    //position -= ray * nextdensity/(nextdensity-density);
    
    //vec3 color = vec3(depth == 0, depth == 1, depth == 2);
    //vec3 color = vec3(density == 1., density == -1., density == 0.);
    //vec3 color = vec3(ind/8.);
    vec3 color = vec3(-density/10.);

    vec3 light = normalize(vec3(0.,1.,0.2));
    
    imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), vec4(color*dot(light, normalize(vec3(cos(position.x/5.), 1., 0.))),1.));
    
}
