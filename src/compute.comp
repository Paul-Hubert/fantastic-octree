#version 450
#extension GL_ARB_separate_shader_objects : enable

layout (local_size_x = 16, local_size_y = 16) in;
layout (binding = 0, rgba8) uniform writeonly image2D resultImage;

layout (binding = 1) uniform Transform {
    mat4 mvp;
    vec3 pos;
} ubo;

void main() {
    vec2 size = vec2(imageSize(resultImage));
    if(gl_GlobalInvocationID.x >= size.x || gl_GlobalInvocationID.y >= size.y) return;
    
    vec3 ray = (vec4(gl_GlobalInvocationID.x / size.x * 2. - 1.0, gl_GlobalInvocationID.y / size.y *2. - 1.0, 0., 1.) * inverse(ubo.mvp)).xyz;
    
    //imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), ray);
    
    vec3 position = ubo.pos;

    //ray -= position;

    //ray = normalize(ray);
    
    float length = 0.;
    float density = 0., nextdensity = 1., adv;
    do {
        adv = 1.;
        length+=adv;
        if(length>100.0) {
            imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), vec4(1.0));
            return;
        }
        position+=ray*adv;
        
        density = nextdensity;
        nextdensity = 10. - position.y - 5.*sin(position.x/5.) - 5*cos(position.z/5.);
    } while(nextdensity > 0);
    position -= ray * adv*nextdensity/(nextdensity-density);
    
    vec3 light = normalize(vec3(0.0,1.,0.2));
    
    imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), vec4(vec3(1.0, 0.0, 0.0)*dot(light, normalize(vec3(cos(position.x/5.), 1.0, -sin(position.x/5.)))),1.0));
    
}
